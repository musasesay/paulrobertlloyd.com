/*  =========================================================================
    Grid
    Based on Toast: https://github.com/daneden/Toast
    Author: Dan Eden
    Licence: MIT

    Usage
    =====
    Assuming default values:

    <div class="grid">
        <div class="grid__col grid__col--1-of-2">
            A half-width column.
        </div>
        <div class="grid__col grid__col--1-of-4 grid__col--pull-1-of-4">
            A quarter, pulled left by its own width.
        </div>
    </div>

    Customisation
    =============
    $grid-namespace and $grid-column-namespace adjusts the class names for the
    grid. With default values, grid wrappers have a class of '.grid' and columns
    '.grid__col'.

    $col-groups(n) adjusts column divisions. For example, $col-groups(12) will
    produce a 12-column grid. $col-groups(3,6,8) will produce a 3-, 6-, and
    8-column grid.

    $u__gutter is—you guessed it—the gutter width. Accepts any unit.

    ========================================================================= */

// Namespaces
// This stops me from being overzealous with enforcing classes
$grid-namespace: 'l-grid' !default;
$grid-column-namespace: 'l-grid__col' !default;

// $col-groups are the column groups you want
// For example, $col-groups: (3, 4, 5) will output:
// .grid__col--n-of-3, .grid__col--n-of-4, [...]
$col-groups: (4, 6, 8) !default;

// Breakpoints
$breakpoint-small: $b__a !default;
$breakpoint-medium: $b__b !default;
$breakpoint-large: $b__c !default;

.#{$grid-namespace} {
    margin-left: -$u__gutter;
    list-style: none;

    // For each of our column groups...
    @each $group in $col-groups {

        // For each column width from 1 to the column group...
        @for $i from 1 through $group {
            > .#{$grid-column-namespace}--#{$i}∣#{$group} {
                width: percentage($i/$group);
            }

            > .#{$grid-column-namespace}--push-#{$i}∣#{$group} {
                margin-left: percentage($i/$group);
            }

            > .#{$grid-column-namespace}--pull-#{$i}∣#{$group} {
                margin-left: -(percentage($i/$group));
            }

            @media (min-width: $breakpoint-small) {
                > .#{$grid-column-namespace}--s-#{$i}∣#{$group} {
                    width: percentage($i/$group);
                }
            }

            @media (min-width: $breakpoint-medium) {
                > .#{$grid-column-namespace}--m-#{$i}∣#{$group} {
                    width: percentage($i/$group);
                }
            }

            @media (min-width: $breakpoint-large) {
                > .#{$grid-column-namespace}--l-#{$i}∣#{$group} {
                    width: percentage($i/$group);
                }
            }
        } // end @for
    } // end @each


    // All direct descendents of .grid get treated the same way.
    // This might be overkill for some, but it’s a time-saver for me.
    .#{$grid-column-namespace} {
        display: inline-block;
        margin-right: -0.25em;
        padding-left: $u__gutter;
        min-height: 1px;
        vertical-align: top;
        box-sizing: border-box;
    }


    // Centers the column in the grid and clears the row of all other columns
    .#{$grid-column-namespace}--centered {
        display: block;
        margin-right: auto;
        margin-left: auto;
    }


    // Removes gutters from the columns
    &.grid--no-gutter {
        margin-left: 0;
        width: 100%;

        .#{$grid-column-namespace} {
            padding-left: 0;
        }

        .#{$grid-column-namespace}--span-all {
            margin-left: 0;
            width: 100%;
        }
    }


    // Align column to the bottom.
    .#{$grid-column-namespace}--ab {
        vertical-align: bottom;
    }


    // Align column to the middle.
    .#{$grid-column-namespace}--am {
        vertical-align: middle;
    }
}
